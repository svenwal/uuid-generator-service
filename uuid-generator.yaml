openapi: 3.0.0
servers:
  - url: https://httpbin.apim.eu
info:
  contact:
    email: me@kennethreitz.org
    url: https://kennethreitz.org
    name: Kenneth Reitz
  description: >-
    A cool simple service returning a UUID based on <https://httpbin.org>
    Also has some more features added like delayed responses and similar
    

    Service is free - but **think about giving an ice cream to the developer**


    ![Developer wants an ice cream](https://images.pexels.com/photos/5060281/pexels-photo-5060281.jpeg?cs=srgb&dl=pexels-roman-odintsov-5060281.jpg&fm=jpg&w=200) 
  title: UUID generator based on httpbin.org
  version: 1.3.0
paths:
  /uuid:
    get:
      description: Generate and get an UUID
      operationId: get_uuid
      responses:
        "200":
          description: A UUID4.
      summary: Return a UUID4.
      tags:
        - Generate UUID
  /anything/query:
    get:
      description: returns all your query parameters
      operationId: query
      parameters:
        - in: query
          name: exampleParam
          required: true
          schema:
            type: integer
            minimum: 5
            maximum: 25
          description: A value between 5 and 25
      responses:
        "200":
          description: The anything endpoint but with limitation on query
      summary: Return anything data.
      tags:
        - Anything
        - Query
      x-kong-plugin-request-validator:
        enabled: true
  /anything/catOrDog:
    post:
      description: create a new pet
      operationId: create_pet
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Cat'
                - $ref: '#/components/schemas/Dog'
      responses:
        "200":
          description: A post request only allowing a cat or dog object
      summary: To bark or not to bark
      tags:
        - Anything
        - CatOrDog
        - Body
      x-kong-plugin-request-validator:
        enabled: false
      x-kong-plugin-rate-limiting-advanced:
        enabled: true
        config:
          limit:
            - 3
          window_size:
            - 60
          namespace: hlferuifgevhrlgzff63
  /delay/{delay}: 
    get:
      description: delay a responses by a defined number of secondes
      operationId: delay
      parameters:
        - in: path
          name: delay
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: 10
          description: The delay in seconds
      responses:
        "200":
          description: Returns a delayed response
      summary: Returns a delayed response (max of 10 seconds).
      tags:
        - Delayed Response
        - Path
      x-kong-plugin-request-validator:
        enabled: true
  /status/{codes}:
    get:
      description: returns a http status code
      operationId: status_code
      parameters:
        - in: path
          name: codes
          required: true
          schema:
            type: integer
            minimum: 200
            maximum: 599
          description: The HTTP status code (200-599)
      responses:
        "200":
          description: Success
        "300":
          description: Redirection
        "400":
          description: Client errors
        "500":
          description: Server errors
      summary: Return status code or random status code if more than one are given
      tags:
        - Status Codes
        - Path
      x-kong-plugin-request-validator:
        enabled: true
      x-kong-plugin-key-auth:
        enabled: true
components:
  securitySchemes:
    KeyCloak:
      type: openIdConnect
      openIdConnectUrl: https://keycloak.apim.eu/auth/realms/kong/.well-known/openid-configuration
      x-kong-security-openid-connect:
        config:
          client_id: 
            - blog_post
          client_secret: 
            - a5186adc-b5e2-4501-85a8-eb19a5e1a2a3
          ssl_verify: false
          consumer_claim:
            - email
          verify_signature: false
          redirect_uri:
             - http://localhost:8000/anything/query
          consumer_optional: true
  schemas:
    Dog:
      type: object
      properties:
        bark:
          type: boolean
        breed:
          type: string
          enum: [Dingo, Husky, Retriever, Shepherd]
#      required:
#        - bark
#        - breed
    Cat:
      type: object
      properties:
        hunts:
          type: boolean
        age:
          type: integer
 #     required:
 #      - hunts
 #      - age

tags:
  - description: Creates a random UUID and returns it in a JSON structure
    name: Generate UUID
  - name: Anything
  - name: Query
  - name: CatOrDog
  - name: Body
  - name: Delayed Response
  - name: Path
  - name: Status Codes
  